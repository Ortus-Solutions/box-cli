<?xml version="1.0"?>
<!-- ====================================================================== 
Build a new distribution of Ortus CommandBox:
This build downloads required libs depending on the target.

External Dependencies:
- railo-cli
- launch4j
====================================================================== -->
<project name="distro.build" default="build.cli" basedir="./" xmlns:antcontrib="antlib:net.sf.antcontrib">
	 <description>
    	Build a new distribution of Ortus CommandBox
    </description>

    <!-- Version: UPDATE ON EACH RELEASE AS NEEDED -->
 	<property name="distro.groupID"				value="ortussolutions" />
 	<property name="distro.name"				value="commandbox"/>
 	<property name="commandbox.version"			value="1.0.0"/>
 	<property name="commandbox.stableVersion"	value="1.0.0"/>

    <!-- Time Label -->
	<tstamp prefix="start"/>
	<!-- Load build lib tasks -->
	<path id="build.antcontrib.libpath">
		<fileset dir="${basedir}/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- Define Tasks -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="build.antcontrib.libpath" />
	<!-- Import Box-Repo Tasks -->
	<import><url url="https://raw.githubusercontent.com/Ortus-Solutions/box-tasks/master/box-repo.xml"/></import>
	
	<!-- Default environment check, if not passed via -Denvironment -->
	<condition property="environment" value="local">
		<not><isset property="environment" /></not>
	</condition>
	<if>
		<available file="build-${environment}.properties" />
		<then>
			<!-- Load env properties -->
			<echo>Loading properties from environment: ${environment}</echo>
			<loadproperties srcFile="build-${environment}.properties"/>
		</then>
	</if>
	<!-- Load root properties -->
	<echo>Loading base properties</echo>
	<loadproperties srcFile="build.properties"/>

	<!-- import cfdistro -->
	<import file="${cfdistro.build.file}"/>
	<property name="maven.repo.local" value="${cfdistro.basedir}/artifacts"/>

	<!-- Init Build -->
	<target name="init" description="Init build" unless="src.isInit">
		<!-- cleanup -->
		<delete dir="${temp.dir}" />
		<delete dir="${build.dir}" />
		<delete dir="${lib.dir}"/>
		<delete dir="${dist.dir}"/>

		<!-- init dirs -->
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${build.dir}"/>
		<chmod file="${build.dir}/**" perm="g+wxrs" type="both" />

		<!-- Increment Build Number -->
		<propertyfile file="build.number" comment="Build Number for ANT. Edit not!">
			<entry key="build.number" 
					type="int" 
			     	operation="+"
					pattern="00000"
			     	default="1" />
		</propertyfile>
		<!-- Retrieve Build Number -->
		<property file="build.number"/>

		<!-- Create version file -->
		<echo file="${build.dir}/.version" append="false">${commandbox.version}+${build.number}</echo>
		
		<!-- If stg, change perms and owners -->
		<antcall target="update.permissions" />

		<!-- get commandbox dependencies -->
		<dependency groupId="jline" artifactId="jline" version="2.12" dest="${lib.dir}" type="jar" unzip="false"/>
		<dependency groupId="org.getrailo" artifactId="railo.cli" version="${railo.cli.version}" dest="${temp.dir}/rcli" type="jar" unzip="true"/>

		<!-- Mark as init -->
		<property name="src.isInit" value="true" />
	</target>

	<!-- update permissions on reports -->
	<target name="update.permissions" description="Update staging server permissions">
		<!-- Integration permissions -->
		<if>
			<equals arg1="${environment}" arg2="auto" />
			<then>
				<chmod file="${temp.dir}/**" perm="go+wrs" type="both" verbose="true" />
				<chown owner="stg-ortus" verbose="true">
					<fileset dir="${temp.dir}" />
				</chown>
			</then>
			<else>
			</else>
		</if>
	</target>

	<!-- Build everything -->
	<target name="build.cli.all" depends="build.cli.deb,build.cli.exe,build.cli.jre,build.cli.rpm,build.apidocs">
		<antcontrib:if>
			<equals arg1="${build.type}" arg2="auto" />
			<then>
				<!-- Remove Unecessary build files from repo, so to not confuse -->
				<delete>
					<fileset file="${dist.dir}/box" />
					<fileset file="${dist.dir}/box.exe" />
				</delete>
				<!-- BE API Docs -->
				<unzip src="${dist.dir}/${distro.name}-apidocs-${commandbox.version}.zip" dest="${artifact.dir}/be-apidocs" overwrite="true"/>
			</then>
		</antcontrib:if>
	</target>

	<!-- Build CLI -->
	<target name="build.cli" description="builds box.jar" depends="init">
		<!-- Copy CommandBox code -->
      	<copy todir="${build.dir}" encoding="UTF-8">
        	<fileset dir="${src.dir}/cfml"/>
        	<fileset file="../license.txt"/>
        	<fileset file="../readme.txt"/>
        </copy>
        
		<!-- Replace Version Numbers -->
		<replaceregexp match='@build.version@' replace="${commandbox.version}" flags="ig" byline="true" encoding="UTF-8">
		  <fileset dir="${build.dir}" />
		</replaceregexp>
		<!-- Replace Build Numbers -->
		<replaceregexp match='@build.number@' replace="${build.number}" flags="ig" byline="true" encoding="UTF-8">
		  <fileset dir="${build.dir}" />
		</replaceregexp>

		<!--  create the cfml distro zip -->
		<zip destfile="${dist.dir}/${distro.name}-cfml-${commandbox.version}.zip" update="false" level="9">
	        <fileset dir="${build.dir}"/>
		</zip>
		<!-- Build Checksum for cfml.zip -->
		<checksum file="${dist.dir}/${distro.name}-cfml-${commandbox.version}.zip" forceoverwrite="true" fileext=".md5" />
		
		<!-- update railo cli project with our version stuff -->
      	<copy tofile="${temp.dir}/rcli/cfml.zip" overwrite="true" encoding="UTF-8">
        	<fileset file="${dist.dir}/${distro.name}-cfml-${commandbox.version}.zip" />
        </copy>
      	<copy todir="${temp.dir}/rcli/resource" overwrite="true" encoding="UTF-8">
        	<fileset dir="${src.dir}/resources" />
        </copy>
		<copy file="${src.dir}/resources/cli.properties" todir="${temp.dir}/rcli/cliloader" overwrite="true" encoding="UTF-8"/>
        
        <!-- jar up the cli again -->
        <zip destfile="${dist.dir}/box.jar" update="false" level="9">
        	<zipfileset dir="${temp.dir}/rcli" />
        </zip>
        <!-- Checksum on Jar -->
        <checksum file="${dist.dir}/box.jar" forceoverwrite="true" fileext=".md5" />

        <!-- cleanup -->
		<delete dir="${temp.dir}/rcli"/>

		<!-- Create box-repo.json -->
		<box-repo location="${artifact.dir}"
				  artifactID="${distro.name}" 
				  groupID="${distro.groupID}"
				  buildID="${build.number}"
				  latest="${commandbox.version}"
				  stableVersion="${commandbox.stableVersion}"
				  classifiers="cfml,bin,win,deb,rpm,apidocs"/>
 	</target>

 	<!-- Build API Docs -->
 	<target name="build.apidocs" description="Builds the api docs" depends="init">
		<!-- Create repo for docs -->
 		<mkdir dir="${api.dir}" />
 		<antcall target="update.permissions" />
 		<!-- Execute DocBox -->
		<get dest="${build.dir}/colddoc.html" src="${url.api}${commandbox.version}&amp;path=${api.dir}" verbose="true"/>
		<delete file="${build.dir}/colddoc.html" />
		<!-- Zip API Docs -->
		<zip destfile="${dist.dir}/${distro.name}-apidocs-${commandbox.version}.zip" basedir="${api.dir}"></zip>
 		<!-- Build Checksum -->
 		<checksum forceoverwrite="true" fileext=".md5" file="${dist.dir}/${distro.name}-apidocs-${commandbox.version}.zip" />
 	</target>

	<!-- Build linux/mac bin -->
	<target name="build.cli.bin" description="create linux/mac binary" depends="build.cli">
		<!--  this bundles the jar into the executable wrapper, which is a bash script -->
        <concat destfile="${dist.dir}/box" force="yes" binary="true">
          <fileset file="${src.dir}/bin/box.sh" />
          <fileset file="${dist.dir}/box.jar" />
        </concat>
        <!-- Change execute perm -->
        <chmod file="${dist.dir}/box" perm="a+x"/>
        <!-- Create distro zip -->
		<zip destfile="${dist.dir}/${distro.name}-bin-${commandbox.version}.zip" level="9" update="false">
	        <zipfileset file="${dist.dir}/box" filemode="711" prefix="" />
		</zip>
		<!-- Build Checksum -->
		<checksum file="${dist.dir}/${distro.name}-bin-${commandbox.version}.zip" forceoverwrite="true" fileext=".md5" />
 	</target>

	<!-- Build windows executable -->
	<target name="build.cli.exe" description="create exe wrapper" depends="build.cli" >
        <!-- Get OS version of lanuch4j -->
        <antcall target="getlaunch4j" />
        <!-- Build Executable Now -->
        <taskdef name="launch4j" 
        		 classname="net.sf.launch4j.ant.Launch4jTask" 
        		 classpath="./launch4j/launch4j.jar:./launch4j/lib/xstream.jar" />
        <launch4j>
			<config headerType="console" 
					outfile="${dist.dir}/box.exe" 
					jarPath="${dist.dir}/box.jar" 
					errTitle="Error running CommandBox"
					supportURL="${commandbox.supportURL}"
					chdir="%OLDPWD%"
					icon="${src.dir}/resources/box.ico"
					stayAlive="true">
					<jre path="./jre/" minVersion="1.6.0" />
					<versionInfo fileVersion="${commandbox.version}.0"
								 txtFileVersion="${commandbox.version}.${build.number}"
								 fileDescription="${commandbox.description}"
								 copyright="Copyright since 2013 Ortus Solutions, Corp"
								 productVersion="${commandbox.version}.0"
								 txtProductVersion="${commandbox.version}.${build.number}"
								 productName="CommandBox"
								 companyName="Ortus Solutions, Corp"
								 internalName="CommandBox"
								 originalFilename="box.exe" />
			</config>
		</launch4j>
		
		<!-- Zip it -->
		<zip destfile="${dist.dir}/${distro.name}-win-${commandbox.version}.zip" level="9" update="false">
	        <zipfileset file="${dist.dir}/box.exe" prefix="" />
		</zip>
		<!-- Build Checksum -->
		<checksum file="${dist.dir}/${distro.name}-win-${commandbox.version}.zip" forceoverwrite="true" fileext=".md5" />
	</target>

	<!-- Build including JREs -->
 	<target name="build.cli.jre" description="Build with JRE included" depends="build.cli">
 		<echo message="Bundling ${jre.version} JRE" />
		
		<!-- Get JRE Dependencies -->
		<dependency groupId="oracle" artifactId="jre" version="${jre.version}" type="zip" classifier="win32" />
		<dependency groupId="oracle" artifactId="jre" version="${jre.version}" type="zip" classifier="win64" />
		<dependency groupId="oracle" artifactId="jre" version="${jre.version}" type="zip" classifier="linux32" />
		<dependency groupId="oracle" artifactId="jre" version="${jre.version}" type="zip" classifier="linux64" />
		<dependency groupId="oracle" artifactId="jre" version="${jre.version}" type="zip" classifier="darwin64" />

		<!--Zip Box Binary With JRE -->
		<zip destfile="${dist.dir}/${distro.name}-jre-win32-${commandbox.version}.zip" level="9" update="false">
            <zipfileset prefix="jre" src="${maven.repo.local}/oracle/jre/${jre.version}/jre-${jre.version}-win32.zip"/>
	        <fileset file="${dist.dir}/box.exe" />
		</zip>
		<zip destfile="${dist.dir}/${distro.name}-jre-win64-${commandbox.version}.zip" level="9" update="false">
            <zipfileset prefix="jre" src="${maven.repo.local}/oracle/jre/${jre.version}/jre-${jre.version}-win64.zip"/>
	        <fileset file="${dist.dir}/box.exe" />
		</zip>
		<zip destfile="${dist.dir}/${distro.name}-jre-linux32-${commandbox.version}.zip" level="9" update="false">
            <zipfileset prefix="jre" src="${maven.repo.local}/oracle/jre/${jre.version}/jre-${jre.version}-linux32.zip"/>
	        <fileset file="${dist.dir}/box" />
		</zip>
		<zip destfile="${dist.dir}/${distro.name}-jre-linux64-${commandbox.version}.zip" level="9" update="false">
            <zipfileset prefix="jre" src="${maven.repo.local}/oracle/jre/${jre.version}/jre-${jre.version}-linux64.zip"/>
	        <fileset file="${dist.dir}/box" />
		</zip>
		<zip destfile="${dist.dir}/${distro.name}-jre-darwin64-${commandbox.version}.zip" level="9" update="false">
            <zipfileset prefix="jre" src="${maven.repo.local}/oracle/jre/${jre.version}/jre-${jre.version}-darwin64.zip"/>
	        <fileset file="${dist.dir}/box" />
		</zip>

		<!-- Build Checksum -->
		<checksum forceoverwrite="true" fileext=".md5">
			<fileset dir="${dist.dir}">
				<include name="*-jre-*.zip" />
			</fileset>
		</checksum>
 	</target>
	
	<!-- Build local maven repository build.cli.deb,build.cli.exe,build.cli.rpm-->
 	<target name="build.cli.mvn" depends="build.cli.deb,build.cli.exe,build.cli.jre,build.cli.rpm">
		<pom-and-deploy pomid="commandbox.pom" packaging="pom" buildtype="${mvn.type}"
			groupId="com.ortussolutions" artifactId="commandbox" version="${commandbox.version}"
			name="commandbox">
			<attachments>
				<attach file="${dist.dir}/box.jar" type="jar" />
				<attach file="${dist.dir}/cfml-${commandbox.version}.zip" type="zip" classifier="cfml" />
				<attach file="${dist.dir}/${distro.name}_${commandbox.version}-1_all.deb" type="deb" />
				<attach file="${dist.dir}/${distro.name}-${commandbox.version}.bin.zip" type="zip" classifier="bin" />
				<attach file="${dist.dir}/${distro.name}-${commandbox.version}.jre-darwin64.zip" type="zip" classifier="jre-darwin64" />
				<attach file="${dist.dir}/${distro.name}-${commandbox.version}.jre-linux32.zip" type="zip" classifier="jre-linux32" />
				<attach file="${dist.dir}/${distro.name}-${commandbox.version}.jre-linux64.zip" type="zip" classifier="jre-linux64" />
				<attach file="${dist.dir}/${distro.name}-${commandbox.version}.jre-win32.zip" type="zip" classifier="jre-win32" />
				<attach file="${dist.dir}/${distro.name}-${commandbox.version}.jre-win64.zip" type="zip" classifier="jre-win64" />
				<attach file="${dist.dir}/${distro.name}-${commandbox.version}.win.zip" type="zip" classifier="win32" />
				<!--<attach file="${rpm.repo}/${distro.name}-${commandbox.version}-1.noarch.rpm" type="rpm" /> -->
			</attachments>
		</pom-and-deploy>
	</target>

	<!-- Debian Repo: Leverages deb task -->
	<target name="build.cli.deb" depends="build.cli.bin" description="builds a .deb file for debian-based systems ONLY!">
	    <!-- Load deb task -->
		<taskdef-dependency name="debtask" classname="debrepo.ant.DebTask" artifactId="debrepo" groupId="org.cfmlprojects" version="1.0.0" />
		<mkdir dir="${deb.repo}"/>
	   	<debtask
	        todir="${deb.repo}"
	        package="commandbox"
	        section="web"
	        depends="java-common"
            key="${ortus.sign.key.id}" passphrase="${ortus.sign.key.passphrase}"
            keyring="${ortus.sign.keyring}">
	        <version upstream="${commandbox.version}"/>
	        <maintainer name="${commandbox.packager.name}" email="${commandbox.packager.email}"/>
	        <description synopsis="${commandbox.description}">CommandBox Version: ${commandbox.version}.</description>
	   		<tarfileset file="${dist.dir}/box" prefix="usr/local/bin" filemode="755"/>
	   	</debtask>
	   	<!-- Copy deb package to dist dir too -->
		<copy file="${deb.repo}/${distro.name}_${commandbox.version}-1_all.deb" toFile="${dist.dir}/${distro.name}-debian-${commandbox.version}.deb"/>
		<!-- Build Checksum -->
		<checksum file="${dist.dir}/${distro.name}-debian-${commandbox.version}.deb" forceoverwrite="true" fileext=".md5" />
	   	<echo message="Updating apt (deb) repo in ${deb.repo}"/>
		<!-- Update Repo -->
        <deb-repo dir="${deb.repo}"
            label="ortus" description="ortussolutions.com debian repository"
            key="${ortus.sign.key.id}" passphrase="${ortus.sign.key.passphrase}"
            keyring="${ortus.sign.keyring}" />
	</target>

	<!-- Build RPM: Leverages redline task -->
	<target name="build.cli.rpm" depends="build.cli.bin">
		<mkdir dir="${rpm.repo}" />
		<echo message="Making rpm in ${rpm.repo} Packager:${commandbox.packager.name} ${commandbox.packager.email} Version: ${commandbox.version}" />
        <!-- execute rpm -->
        <property name="commandbox.rpm.repourl" value="${ortus.repoURL}/RPMS/noarch" />
        <echo message="RPM repository location: ${commandbox.rpm.repourl}"/>
		<rpm-create rpm.repo="${rpm.repo}" rpm.release="1"
			rpm.reponame="ortus" rpm.baseurl="${commandbox.rpm.repourl}"
			rpm.group="com.ortussolutions" rpm.name="${distro.name}" rpm.version="${commandbox.version}"
			rpm.packager="${commandbox.packager.name} ${commandbox.packager.email}"
			rpm.url="${commandbox.supportURL}" failonerror="true"
			rpm.keyring="${ortus.sign.keyring}" rpm.key="${ortus.sign.key.id}" 
			rpm.passphrase="${ortus.sign.key.passphrase}">
			<tarfileset file="${dist.dir}/box" prefix="/usr/bin" filemode="744" username="root" group="root"/>
		</rpm-create>
		<!-- Copy rpm to repo -->
		<copy file="${rpm.repo}/${distro.name}-${commandbox.version}-1.noarch.rpm" tofile="${dist.dir}/${distro.name}-rpm-${commandbox.version}.rpm" />
		<!-- Build Checksum -->
		<checksum file="${dist.dir}/${distro.name}-rpm-${commandbox.version}.rpm" forceoverwrite="true" fileext=".md5" />
	</target>

	<!-- ********************************************************************************************-->
	<!--						DEPENDENCY TARGETS 													 -->
	<!-- ********************************************************************************************-->

	<!-- Get launch4j -->
	<target name="getlaunch4j" description="Get an OS dependent launch4j into the build directory">
		<!-- do a check -->
		<antcontrib:if>
	        <available file="launch4j/launch4j.jar" />
	        <then><echo>Launch4j Binary found!</echo></then>
	        <else>
	            <echo>Launch4j not found, getting artifact from ${ortus.repoURL}</echo>
	            <!-- Determine OS type -->
				<antcontrib:if>
					<os family="windows" />
					<then><property name="launch4j.filename" value="launch4j-${launch4j.version}-win32.zip"/></then>
					<elseif>
						<os family="mac" />
						<then><property name="launch4j.filename" value="launch4j-${launch4j.version}-macosx.tgz"/></then>
					</elseif>
					<elseif>
						<os family="unix" />
						<then><property name="launch4j.filename" value="launch4j-${launch4j.version}-linux.tgz"/></then>
					</elseif>
				</antcontrib:if>
				<echo>Downloading ${launch4j.filename} from ${ortus.repoURL}...</echo>
				<get src="${ortus.repoURL}/launch4j/${launch4j.version}/${launch4j.filename}" 
					 dest="."
					 verbose="true" />
				<!-- Unzip according to OS -->
				<antcontrib:if>
					<os family="windows" />
					<then>
						<unzip src="${launch4j.filename}" dest="." overwrite="true"/>
					</then>
					<else>
						<untar src="${launch4j.filename}" dest="." compression="gzip"/>
					</else>
				</antcontrib:if>
				<!-- Removal -->
				<delete file="${launch4j.filename}" />
	        </else>
	    </antcontrib:if>
	    <!-- Add execution perms every time just in case -->
	    <chmod dir="./launch4j/bin/" perm="ugo+rx" includes="*"/>
	</target>

	<!-- ********************************************************************************************-->
	<!--						TEST TARGETS 														 -->
	<!-- ********************************************************************************************-->

	<target name="build.testwar" depends="cfdistro.build" description="creates test war">
		<!-- creates a war for testing in dist/, use 'box-cli runwar.start.fg' to run -->
		<dependency artifactId="testbox" groupId="org.coldbox" version="1.1.0" mapping="/testbox" />
		<!-- set mapping for MXUnit compat -->
		<mapping physical="@ext.mappings.dir@/org.coldbox/testbox/1.1.0/system/testing/compat" virtual="/mxunit"/>
		<!-- set mappings for sources, tests -->
		<mapping virtual="/commandbox" physical="@src.dir@/cfml" />
		<mapping virtual="/wirebox" physical="@src.dir@/cfml/system/wirebox" />
		<mapping virtual="/cfml" physical="@src.dir@/cfml" />
		<mapping virtual="/tests" physical="@src.dir@/../tests" />
	</target>

	<target name="test" description="starts test server, runs tests, then stops test server">
		<server-run>
			<testbox-rundirs basePath="${tests.dir}/cfml" componentPath="tests.cfml" outputdir="${dist.dir}/testresults/"  
			runner="http://${runwar.host}:${runwar.port}/tests/tboxrunner.cfm?"/>
		</server-run>
	</target>

	<target name="build.test" depends="build.testwar,test" description="build test war, run tests">
		<!-- mostly for automated builds- you really only need to build the testwar once -->
	</target>

	<target name="build.test.all" depends="build.cli.all, build.test">
	</target>

</project>
